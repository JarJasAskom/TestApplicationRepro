@page "/"
@using AutoBogus
@rendermode InteractiveServer

@inject ICsireCommunicationQuery mCsireCommunicationQuery

<div>
    <FluentButton Appearance="Appearance.Accent" OnClick="Refresh">
        Refresh
    </FluentButton>

    <FluentButton Appearance="Appearance.Accent" OnClick="Generate">
        Generate 10 records
    </FluentButton>

</div>

<ErrorBoundary>
    <ChildContent>
        <FluentDataGrid TGridItem="CsireRequest" Items="@mCsireRequests" ShowHover="true" ResizableColumns="true" @ref="mFluentDataGrid">

            <SelectColumn TGridItem="CsireRequest"
            SelectMode="DataGridSelectMode.SingleSticky"
            SelectFromEntireRow="true"
            Property="@(e => IsSelected(e))"
            OnSelect="@(e => Select(e.Item, e.Selected))" />

            <PropertyColumn Property="@(p => p.Id)" Width="0.5fr" Sortable="true" />
            <PropertyColumn Property="@(p => p.ProcessNumber)" Width="0.5fr" Sortable="true" />
            <PropertyColumn Property="@(p => p.Description)" Tooltip="true" Width="2fr" Sortable="true" />
            <PropertyColumn Property="@(p => p.CreatedOnUtc)" Sortable="true" />
            <PropertyColumn Property="@(p => p.CreatedBy)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Status)" Sortable="true" />

            <PropertyColumn Property="@(p => p.MessageId)" Tooltip="true" Sortable="true" />
            <PropertyColumn Property="@(p => p.Message)" Tooltip="true" Sortable="true" />
            <PropertyColumn Property="@(p => p.SentOnUtc)" Sortable="true" />

            <PropertyColumn Property="@(p => p.ResultCode)" Sortable="true" />
            <PropertyColumn Property="@(p => p.ResultDescription)" Sortable="true" />
            <PropertyColumn Property="@(p => p.AnsweredOnUtc)" Sortable="true" />

        </FluentDataGrid>
    </ChildContent>
    <ErrorContent Context="Exception">
        <p class="errorUI">
            @Exception.Message
        </p>
    </ErrorContent>
</ErrorBoundary>


@code {
    FluentDataGrid<CsireRequest>? mFluentDataGrid;
    IQueryable<CsireRequest> mCsireRequests = new List<CsireRequest>().AsQueryable();

    Dictionary<int, bool> mSelected = [];


    protected override void OnInitialized()
    {
        mCsireRequests = mCsireCommunicationQuery.GetRequests();

        // uncommnent and DataGrid starts correctly select item
        // mCsireRequests = mCsireRequests.ToList().AsQueryable();
    }

    protected override void OnParametersSet()
    {
    }


    bool IsSelected(CsireRequest aCsireRequest)
    {
        if (mSelected.TryGetValue(aCsireRequest.Id, out bool selected))
            return selected;

        return false;
    }


    void Select(CsireRequest aCsireRequest, bool aSelected)
    {
        Console.WriteLine($"{DateTime.Now} Select  {aCsireRequest.Id}, Selected: {aSelected}");

        if (mSelected.TryGetValue(aCsireRequest.Id, out bool selected))
        {
            mSelected[aCsireRequest.Id] = aSelected;
        }
        else
        {
            mSelected.Add(aCsireRequest.Id, aSelected);
        }
    }


    async Task Refresh()
    {
        if (mFluentDataGrid == null)
            return;

        await mFluentDataGrid.RefreshDataAsync();
    }


    async Task Generate()
    {
        List<CsireRequest> requests = AutoFaker.Generate<CsireRequest>(10);
        foreach (var request in requests)
            request.Id = 0;

        await mCsireCommunicationQuery.Insert(requests);
        await Refresh();
    }
}
